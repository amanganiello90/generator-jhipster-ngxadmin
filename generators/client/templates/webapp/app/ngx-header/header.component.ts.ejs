<%#
Copyright 2013-2022 the original author or authors from the JHipster project.
This file is part of the JHipster project, see https://www.jhipster.tech/
for more information.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
     https://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

N.B. JHipster 7.8.1 angular navbar template modified and merged

-%>
import { OnDestroy } from '@angular/core';
import { NbMediaBreakpointsService, NbMenuService, NbSidebarService, NbThemeService } from '@nebular/theme';


import { LayoutService } from '../../../@core/utils';
import { map, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';

import { FormControl } from '@angular/forms';

import { Component, OnInit<% if (enableTranslation && applicationTypeGateway) { %>, Compiler, Injector, NgModuleFactory, Type<% } %> } from '@angular/core';
import { Router } from '@angular/router';
<%_ if (enableTranslation) { _%>
import { TranslateService } from '@ngx-translate/core';
import { SessionStorageService } from 'ngx-webstorage';
<%_ } _%>

import { VERSION } from 'app/app.constants';
<%_ if (enableTranslation) { _%>
import { LANGUAGES } from 'app/config/language.constants';
<%_ } _%>
import { Account } from 'app/core/auth/account.model';
import { AccountService } from 'app/core/auth/account.service';
import { LoginService } from 'app/login/login.service';
import { ProfileService } from 'app/layouts/profiles/profile.service';


@Component({
  selector: 'ngx-header',
  styleUrls: ['./header.component.scss'],
  templateUrl: './header.component.html',
})
export class HeaderComponent implements OnInit, OnDestroy {

  private destroy$: Subject<void> = new Subject<void>();
  userPictureOnly: boolean = false;
  user: any;

  inProduction?: boolean;
<%_ if (enableTranslation) { _%>
  languages = LANGUAGES;
<%_ } _%>
  openAPIEnabled?: boolean;
  version = '';
  account: Account | null = null;

  entitiesSelectControl=new FormControl('');
  adminSelectControl=new FormControl('');
  accountSelectControl=new FormControl('');
  languageSelectControl=new FormControl('');

  themes = [
    {
      value: 'default',
      name: 'Light',
    },
    {
      value: 'dark',
      name: 'Dark',
    },
    {
      value: 'cosmic',
      name: 'Cosmic',
    },
    {
      value: 'corporate',
      name: 'Corporate',
    },
  ];

  currentTheme = 'default';

  userMenu = [ { title: 'Profile' }, { title: 'Log out' } ];

  constructor(private sidebarService: NbSidebarService,
              private menuService: NbMenuService,
              private themeService: NbThemeService,
              private layoutService: LayoutService,
              private breakpointService: NbMediaBreakpointsService,
              private loginService: LoginService,
            <%_ if (enableTranslation) { _%>
                private translateService: TranslateService,
                private sessionStorageService: SessionStorageService,
              <%_ if (applicationTypeGateway) { _%>
                private compiler: Compiler,
                private injector: Injector,
              <%_ } _%>
            <%_ } _%>
                private accountService: AccountService,
                private profileService: ProfileService,
                private router: Router
              ) {
              if (VERSION) {
                  this.version = VERSION.toLowerCase().startsWith('v') ? VERSION : `v${VERSION}`;
              }         
  }

  ngOnInit() {
    this.profileService.getProfileInfo().subscribe(profileInfo => {
      this.inProduction = profileInfo.inProduction;
      this.openAPIEnabled = profileInfo.openAPIEnabled;
    });

    this.accountService.getAuthenticationState().subscribe(account => {
      this.account = account;
    });

    this.currentTheme = this.themeService.currentTheme;


    const { xl } = this.breakpointService.getBreakpointsMap();
    this.themeService.onMediaQueryChange()
      .pipe(
        map(([, currentBreakpoint]) => currentBreakpoint.width < xl),
        takeUntil(this.destroy$),
      )
      .subscribe((isLessThanXl: boolean) => this.userPictureOnly = isLessThanXl);

    this.themeService.onThemeChange()
      .pipe(
        map(({ name }) => name),
        takeUntil(this.destroy$),
      )
      .subscribe(themeName => this.currentTheme = themeName);
      
  }


  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  changeTheme(themeName: string) {
    this.themeService.changeTheme(themeName);
  }

  toggleSidebar(): boolean {
    this.sidebarService.toggle(true, 'menu-sidebar');
    this.layoutService.changeLayoutSize();

    return false;
  }

  navigateHome() {
    this.menuService.navigateHome();
    return false;
  }

  goToEntityPages(entityNamePath: string) {
   this.entitiesSelectControl.reset('');
   this.router.navigate([entityNamePath]);
  }
  goToAdminPages(adminPath: string) {
    this.adminSelectControl.reset('');
    this.router.navigate([adminPath]);
  }

  performLoginOrLogout(loginOrLogout: string) {
    this.accountSelectControl.reset('');
    if(loginOrLogout==='login'){
      this.login();
    }
    else {
      this.logout();
    }
  }

  <%_ if (enableTranslation) { _%>
  changeLanguage(languageKey: string): void {
    this.languageSelectControl.reset('');
    this.sessionStorageService.store('locale', languageKey);
    this.translateService.use(languageKey);

    this.entitiesSelectControl.reset('');
    this.adminSelectControl.reset('');
    this.accountSelectControl.reset('');

  }
  <%_ } _%>


  login(): void {
    this.loginService.login();
  }

  logout(): void {
    this.loginService.logout();
    this.router.navigate(['']);
  }

}
